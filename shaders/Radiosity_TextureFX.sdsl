[TextureSource]


shader Radiosity_TextureFX : TextureFX
{

float2 R = ViewSize;
// float aspectX = 1.;
int SAMPLES =  64;
int SAMPLES2 = 48;
float time = 0;
float maxDist = 0.15;

bool bumpy = false;

float4 PhongDirectional(float3 NormV, float3 ViewDirV, float3 LightDirV)
{
    // float4 amb = float4(AmbientColor.rgb, 1);
    //halfvector
    float3 H = normalize(ViewDirV + LightDirV);

    //compute blinn lighting
    float3 shades = lit(dot(NormV, LightDirV), dot(NormV, H), 10.0f).xyz;

    float4 diff = 1 * shades.y;
    diff.a = 1;

    //reflection vector (view space)
    float3 R = normalize(2 * dot(NormV, LightDirV) * NormV - LightDirV);

    //normalized view direction (view space)
    float3 V = normalize(ViewDirV); 

    //calculate specular light
    float4 spec = pow(max(dot(R, V),0), 10.0f * .2) * .1;

    return diff + spec;
}

float3 BumpDirectional(float4 nmap, float2 uv, float2 dir, float2 R)
{
    // float3 LightDirV = normalize(-LightDirection);
    float3 LightDirV = (float3(dir.x,dir.y, -1.));
    float3 NormV = float3(nmap.x - 0.5, -(nmap.y - 0.5), -1);
    
    NormV = lerp(float3(0, 0, -1), NormV, 10.0f);
    NormV = normalize(NormV);

    float3 ViewDirV = -normalize(float3((uv.xy * 2 - 1) * float2(1, -1) * R/R.x, 11.1));

    return PhongDirectional(NormV, ViewDirV, LightDirV).rgb;
};


float sphereSDF(float2 p, float size) {
    return length(p) - size;
}

float boxSDF(float2 p, float2 size) {
    float2 r = abs(p) - size;
    return min(max(r.x, r.y),0.) + length(max(r,float2(0,0)));
}

void addObj(inout float dist, inout float3 color, float d, float3 c) {
    if (dist >= d) {
        dist = d;
        color = c;
    }
}

// float3 calcNormal( float2 p ) // for function f(p)
// {
//     float h = 0.09961; // replace by an appropriate value
//     float2 k = float2(1,-1);
//     return normalize( k.xyy*texDist( p + k.xyy*h) + 
//                       k.yyx*texDist( p + k.yyx*h) + 
//                       k.yxy*texDist( p + k.yxy*h) + 
//                       k.xxx*texDist( p + k.xxx*h));
// }

float texDist(float2 p){
    float samp = Texture0.SampleLevel(Sampler0, (p + .5), 0).r;
    // float samp = Texture0.Load(int3( (p + .5) / 1 * R, 0)).r;
    return samp;
}



void addObjTex(inout float dist, inout float3 color, float d, float2 p) {
    if (dist > d) {
        dist = d;
        color = Texture1.SampleLevel(Sampler0, (p + .5), 0).rgb * 1.;

        // color =  Texture1.Load(int3( (p + .5) / 1 * R, 0)).r;
    }
}


void scene(float2 pos, out float3 color, out float dist) {
    dist = 1e9;
    // color = float3(0,0,0);
    // addObj(dist, color, sphereSDF(pos - float2(0,-2), 0.5),  float3(1, 1, 1)*2);
    // addObj(dist, color, boxSDF(pos - float2(.75,0), float2(.01, 0.5)), float3(1.0,.5,.5));
    // addObj(dist, color, boxSDF(pos - float2(-.75,0), float2(.01, 0.5)), float3(.5,.5,1.0));
   
    addObjTex(dist, color, texDist(pos), pos);
    // addObj(dist, color, boxSDF(pos - float2(mouse), float2(0.01, 0.1)), float3(.0,.0,.0));

}


void trace(float2 p, float2 dir, out float3 c, out float marchedDist, out float2 endpoint, float aspectX) {
    float marched = 0;
    float d;
    int bounces = 0;
    float2 start = p;
    float3 bounceCol = 1;
    // float localMax = maxDist;
    for (int j = 0; j < SAMPLES2; j++) {
        scene(p, c, d);
        
        marched += d;

        
        if (d <= .0001 ) {  
            

            bounces++;
            // if(bounces > 5) return;
                
            float2 normal = normalize(Texture2.SampleLevel(Sampler0, (p + .5), 0).rg -.5);
            float material = Texture3.SampleLevel(Sampler0, (p + .5), 0).r;

            if(material == 0.0){ // is emissive
                marchedDist = marched;
                
                if(bounces > 1){
                    c *= bounceCol;
                }
                
                return;
            }
            else if(material < .1){
                // Diffuse Reflection
                dir = normalize(-normal - normalize(float2(random(p+sin(time)),random(p+5+sin(time))*1)-.5));
                p -= dir * .009;
                // bounceCol = 1;
            }
              else if(material < .2){
                // Diffuse Reflection
                dir = normalize(-normal - normalize(float2(random(p+sin(time)),random(p+5+sin(time))*1)-.5));
                p -= dir * .009;
                bounceCol *= c;
            }
            else if(material < .3){
                // Iridescence ?
                // bounceCol = lerp(float3(1,0,0),float3(0,0,1),dot(dir, normal)-.5);

                // Specular Reflection
                dir = reflect(dir, normal);
                p -= dir * .009;

            }
              else if(material < .4){
                // Specular Reflection
                dir = reflect(dir, normal);
                p -= dir * .009;
                bounceCol *= c;
            }
             else if(material < .5){
            // Refraction index of Glass: 1.52. Here we use 5.0 for more drama!
            // Todo: Chormatic aberation and also reflection
            //       - Give every ray an ID
            //       - 50% of rays refelect, 50% refract
            //       - on refraction give every thrid ray different refraction index and color
            //       - e.g. red: 1.52, green, 1.53, blue, 1.51
            //
            // Specular Refraction
                dir = refract(dir, -normal,3.);
                p -= dir * .02;
             }
            else if(material < .6){
            // Specular Refraction
                dir = refract(dir, -normal,3.);
                p -= dir * .02;
                bounceCol *= c;
             }        
            

        }
        p -= dir * float2(1,aspectX) * d;
        
        endpoint = p;
        if(marchedDist >= maxDist) return;

        
    }

    bounceCol = 0;
    c = float3(0,0,0);
}


float random (in float2 _st) {
    
    return frac(sin(dot(_st.xy,
        float2(12.9898,78.233)))*
        43758.5453123);
}


stage override float4 Shading()
{
float aspectX = R.y/R.x;
float2 uv = (streams.TexCoord.xy -.5);
float3 c;
float3 col = float3(0,0,0);
float4 texCol = Texture1.SampleLevel(Sampler1, (uv + .5), 0);
// if (texCol.a >.99999) return texCol; // Has aliasing issues
float4 bump;
if(bumpy) bump = Texture4.SampleLevel(Sampler0, streams.TexCoord.xy, 0);

// uv+=(bump-.5)*float2(.1,.1)*2;

for (int i = 0; i < SAMPLES; i++) {
    
   
    float t = (float(i) + random(uv+float(i)))/ float(SAMPLES) * 2. * 3.141;        
     
    float marchedDist;
    // Accidental focus blur, was supposed to smooth edges
    //trace(uv+(random(uv+float(i)+float2(sin(time),cos(time)))-.5)*.01, float2(cos(t+time), sin(t+time)), c, marchedDist);
    
    float2 dir = float2(cos(t+time), sin(t+time));
    float2 endpoint = 0;
  

    trace(uv, dir, c, marchedDist,endpoint,aspectX);

    c = lerp(c,0,pow(abs(marchedDist/maxDist), maxDist));

    if(bumpy) c *= BumpDirectional(bump, uv, normalize(uv-endpoint)*float2(-1,1), R);
  
    col += c;

}   

    col /= float(SAMPLES);
    return saturate(float4(col, 1.0));
}


};